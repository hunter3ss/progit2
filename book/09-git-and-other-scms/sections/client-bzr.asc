==== Git at Bazaar

Bukod sa DVCS, ang iba pang sikat ay ang http://bazaar.canonical.com/[Bazaar].
Ang Bazaar ay libre at open source, at parte ng http://www.gnu.org/[GNU Project].
Ito ay kumikilos na sobrang magkaiba sa Git.
Minsan, upang gumawa ng parehong bagay ng sa Git, kailangan mong gumamit ng isang ibang keyword, at ilang mga keyword na karaniwan ay walang parehong kahulugan.
Sa partikular, ang pamamahala ng branch ay sobrang naiiba at maaaring magsanhi ng pagkalito, lalong lalo na kapag may isang tao na darating mula sa sansinukob ng Git.
Gayunpaman, ito ay posibleng magtrabaho sa isang Bazaar na repositoryo mula sa isang Git.

May maraming mga proyekto na nagpapahintulot sa iyo na gumamit ng Git bilang isang Bazaar na kliyente.
Dito ay gagamitin natin ang proyekto ni Felipe Contreras na maaari mong hanapin sa https://github.com/felipec/git-remote-bzr[].
Upang i-install ito, kailangan mo lang i-download ang file na git-remote-bzr sa isang folder na nilalaman sa iyong `$PATH`:
[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

Kailangan mo ring magkaroon ng naka-install na Bazaar.
Iyon lang!

===== Gumawa ng isang Git na repositoryo mula sa isang Bazaar na repositoryo

Ito ay simpleng gamitin.
Sapat lamang na mag-clone ng isang Bazaar na repositoryo at ipi-prefix ito gamit ang `bzr::`.
Dahil ang Git at Bazaar ay parehong gumagawa ng buong mga clone sa iyong makina, posibleng mag-attach ng isang Git clone sa iyong lokal na Bazaar clone, ngunit hindi ito rekomendado.
Mas madaling direktang i-attach ang iyong Git na clone sa isang kaparehong lugar kung saan naka-attach ang iyong Bazaar na clone â€’ ang sentral na repositoryo.

Ipagpalagay natin na ikaw ay nakapagtrabaho sa isang remote na repositoryo kung saan nasa address na `bzr+ssh://developer@mybazaarserver:myproject`.
[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

Sa puntong ito, ang iyong Git na repositoryo ay nabuo ngunit hindi nakasiksik para sa paggamit ng optimal disk.
Kaya nga kailangan mo ring linisin at isiksik ang iyong Git na repositoryo, lalo na kung ito ay malaki:
[source,console]
----
$ git gc --aggressive
----

===== Bazaar na mga branch

Ang Bazaar ay nagpapahintulot lamang sa iyo na mag-clone ng mga branch, ngunit ang isang repositoryo ay maaaring maglaman ng iilang mga branch, at ang `git-remote-bzr` ay maaaring mag-clone ng pareho.
Halimbawa, upang mag-clone ng isang branch:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

At upang mag-clone ng buong repositoryo:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

Ang pangalawang utos ay iko-clone ang lahat ng mga branch na nilalaman sa emacs na repositoryo; gayunpaman posibleng tumuro sa ilang mga branch:
[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Ilang remote na mga repositoryo ay hindi nagpapahintulot sa iyo na maglista ng kanilang mga branch, sa kasong manu-mano mong tukuyin ang mga iyon, at kahit na maaari mong tukuyin ang kompigurasyon sa pag-clone na utos, maaaring mas madali ito para sa iyo:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Huwag pansinin ang kung ano ang hindi pinansin gamit ang .bzrignore

Dahil ikaw ay nagtatrabaho sa isang proyekto na pinamamahalaan ng Bazaar, hindi ka dapat gumawa ng isang `.gitignore` na file dahil *maaari* mong aksidenteng matakda ito sa ilalim ng version control at ang ibang mga tao na nagtatrabaho gamit ang Bazaar ay magagambala.
Ang solusyon ay ang paglikha ng `.git/info/exclude` na file alinman bilang isang simbolikong link o bilang isang regular na file.
Tingnan natin mamaya kung paano lutasin ang tanong na ito.

Ang Bazaar ay gumagamit ng parehong modela sa Git upang hindi magpansin ng mga file, ngunit mayroon ding dalawang mga tampok na walang isang katumbas sa Git.
Ang kumpletong deskripsyon ay maaaring matagpuan sa http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[the documentation].
Ang dalawang mga tampok ay:

1. Ang "!!" ay nagpapahintulot sa iyo na hindi pumansin sa tiyak na mga pattern ng file kahit na ang mga ito ay nakatukoy gamit ang isang "!" na panuntunan.
2. Ang "RE:" sa unahan ng isang linya ay nagpapahintulot sa iyo upang tumukoy ng isang https://docs.python.org/3/library/re.html[Python regular expression] (Ang Git ay nagpapahintulot lamang ng mga shell glob).

Bilang isang kalalabasan, mayroong dalawang magkaibang mga sitwasyon na isaalang-alang:

1. Kung ang `.bzrignore` na file ay hindi naglalaman ng anuman sa dalawang tiyak na mga prefix na ito, pagkatapos ay maaari kang simpleng gumawa ng isang simbolikong link nito sa repositoryo: `ln -s .bzrignore .git/info/exclude`
2. Kung hindi man, dapat kang lumikha ng `.git/info/exclude` na file at iangkop ito upang hindi pansinin ang eksaktong parehong mga file sa `.bzrignore`.

Kahit ano pa ang kaso, kailangan mong manatiling mapagbantay laban sa anumang pagbabago ng `.bzrignore` upang siguraduhin na ang `.git/info/exclude` na file ay palaging sumasalamin sa `.bzrignore`.
Sa katunayan, kung ang `.bzrignore` na file ay magbabago at naglalaman ng isa o higit pang mga linya na nagsisimula ng "!!" o "RE:", ang Git na hindi kayang interpretahin ang mga linyang ito, kailangan mong iangkop ang iyong `.git/info/exclude` na file upang hindi pansinin ang parehong mga file bilang mga hindi pinansin gamit ang `.bzrignore`.
Bukod dito, kung ang `.git/info/exclude` na file ay isang simbolikong link, kailangan mo munang burahin ang simbolikong link, kopyahin ang `.bzrignore` sa `.git/info/exclude` at pagkatapos ay iangkop ang huli.
Gayunpaman, mag-ingat sa paglikha nito dahil gamit ang Git ito ay imposibleng muling isama ang isang file kung ang isang magulang na direktoryo sa file na iyon ay hindi kasama.

===== I-fetch ang mga pagbabago ng remote na repositoryo

Upang mag-fetch ng mga pagbabago ng remote, magpu-pull ka ng mga pagbabago tulad ng dati, gamit ang Git na mga utos.
Kung kaya ang iyong mga pagbabago ay nasa `master` na branch, i-merge o i-rebase ang iyong trabaho sa `origin/master` na branch:
[source,console]
----
$ git pull --rebase origin
----

===== I-push ang iyong trabaho sa remote na repositoryo

Dahil ang Bazaar rin ay may konsepto ng merge na mga commit, walang problema kung ikaw ay mag-push ng isang merge na commit.
Kaya maaari kang magtrabaho sa isang branch, i-merge ang mga pagbabago sa `master` at i-push ang iyong trabaho.
Pagkatapos, gumawa ka ng iyong mga branch, subukan at i-commit mo ang iyong trabaho gaya ng dati.
Sa huli ay i-push mo ang iyong trabaho sa Bazaar na reporsitoryo:
[source,console]
----
$ git push origin master
----

===== Mga Paunawa

Ang balangkas ng mga remote-helper ng Git ay may ilang mga limitasyon na nalalapat.
Sa partikular, ang mga utos na ito ay hindi gagana:

* git push origin :branch-to-delete (Ang Bazaar ay hindi maaaring tumanggap ng pagbubura ng ref sa ganitong paraan.)
* git push origin old:new (ipu-push nito ang 'old')
* git push --dry-run origin branch (ito ay magpu-push)

===== Buod

Dahil katulad ang mga modelo ng Git at Bazaar, may hindi medyo maraming paglalaban kapag nagtatrabaho sa kabuuan ng hangganan.
Hangga't ikaw ay nagmamasid para sa mga limitasyon, at palaging may kamalayan na ang remote na repositoryo ay hindi katutubong Git, ikaw ay magiging maayos lamang.
