[[_git_tfs]]
==== TFS

(((TFS)))(((Pag-import, mula sa TFS)))
Kung ang iyong koponan ay nagpapalit ng kanilang source control mula sa TFVC patungo sa Git, gugustuhin mo makuha ang pagpapalit na nasa pinakamataas na katapatan.
Nangangahulugan ito na, habang tayo ay sumakop sa kapwa git-tfs at git-tf para sa interop na seksyon, sasakupin lang natin ang git-tfs para sa bahaging ito, dahil ang git-tfs ay sumusuporta sa mga branch, at ito ay labis na mahirap gamit ang git-tf.

[TANDAAN]
====
Ito ay isang iisang-daanan ng pagpapalit.
Ang resultang Git na repositoryo ay hindi maaaring kumunekta sa orihinal na TFVC na proyekto.
====

Ang unang bagay na gagawin ay ang pag-map ng mga username.
Ang TFVC ay patas na liberal na mayroong kung anumang pumupunta sa may-akda na field para sa mga hanay ng pagbabago, ngunit gusto ng Git ng isang nababasa-ng-tao na pangalan at email address.
Maaari mong makuha ang impormasyong ito mula sa `tf` na command-line na kliyente, kagaya nito:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Kinukuha nito lahat ng mga hanay ng pagbabago sa kasaysayan ng proyekto at ilalagay ito sa AUTHORS_TMP na file na ipo-proseso natin upang katasin ang datos ng 'User' na kolum (yung pangalawa).
Buksan ang file at hanapin kung anong mga karakter nagsisimula at nagwawakas ang kolum at palitan, sa sumusunod na command-line, ang mga parameter na `11-20` sa `cut` na utos kasama ang mga nakita:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

Ang `cut` na utos ay nagpapanatili lamang ng mga karakter sa pagitan ng 11 at 20 mula sa bawat linya.
Ang `tail` na utos ay lumalaktaw sa unang dalang mga linya, na mga field header at ASCII-art na mga underline.
Ang resulta ng lahat ng ito ay naka-pipe sa `sort` at `uniq` upang matanggal ang mga umuulit, at na-save sa isang file na nakapangalang `AUTHORS`.
Ang susunod na hakbang ay manwal; upang ang git-tfs ay makagawa ng epektibang paggamit ng file na ito, bawat linya ay dapat nasa ganitong format:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Ang bahagi na nasa kaliwa ay ang ``User'' na field mula sa TFVC, at ang bahagi na nasa kanang banda ng equals na tanda ay ang user name na magagamit para sa Git na mga commit.

Kapag mayroon ka nitong file, ang susunod na bagay na gagawin ay gumawa ng isang buong clone ng TFVC na proyekto kung saan ka interesado:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Susunod ay gugustuhin mong linisin ang `git-tfs-id` na mga seksyon mula sa ibaba ng commit na mga mensahe.
Ang sumusunod na utos ay gagawa sa iyon:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

Iyon ay gumagamit ng `sed` na utos mula sa Git-bash na environment upang palitan ang anumang linya na nagsisimula sa ``git-tfs-id:'' na may kawalan ng laman, kung saan hindi papansinin ng Git.

Kapag iyon ay natapos, handa ka nang magdagdag ng isang panibagong remote, mag-push pataas ng lahat ng iyong mga branch, at hikayatin ang iyong koponan na magsimulang magtrabaho mula sa Git.
