==== Bazaar
(((Bazaar)))(((Pag-import, mula sa Bazaar)))

Ang Bazaar ay isang DVCS na kasangkapan na masyadong katulad ng Git, at bilang isang resulta ito ay sobrang matapat upang magpalit ng isang Bazaar na repositoryo patungo sa isang Git na repositoryo.
Upang mapatupad ito, kakailanganin mong mag-import ng `bzr-fastimport` na plugin.

===== Pagkukuha ng bzr-fastimport na plugin

Ang pamamaraan para sa pag-install ng fastimport na plugin ay naiiba sa katulad ng UNIX na operating na sistema at sa Windows.
Sa unang kaso, ang pinakasimple ay ang pag-install ng `bzr-fastimport` na pakete na mag-i-install sa lahat ng kinakailangang mga dependensya.

Halimbawa, gamit ang Debian at derived, gagawin mo ang sumusunod:

[source,console]
----
$ sudo apt-get install bzr-fastimport
----

Gamit ang RHEL, gagawin mo ang sumusunod:

[source,console]
----
$ sudo yum install bzr-fastimport
----

Gamit ang Fedora, mula sa release 22, ang bagong tagapamahala ng pakete ay dnf:

[source,console]
----
$ sudo dnf install bzr-fastimport
----

Kung ang pakete ay hindi maaaring gamitin, maaari mong i-install ito bilang isang plugin:

[source,console]
----
$ mkdir --parents ~/.bazaar/plugins/bzr     # gumagawa ng nararapat na mga folder para sa mga plugin
$ cd ~/.bazaar/plugins/bzr
$ bzr branch lp:bzr-fastimport fastimport   # mag-i-import ng fastimport na plugin
$ cd fastimport
$ sudo python setup.py install --record=files.txt   # mag-i-install ng plugin
----

Upang paganahin ang plugin na ito, kakailanganin mo ang `fastimport` na modyul ng Python.
Maaari mong suriin kung ito ay nandoon o wala at i-install ito gamit ang sumusunod na mga utos:

[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----

Kung ito ay hindi maaaring gamitin, maaari mong i-download ito sa address na https://pypi.python.org/pypi/fastimport/.

Sa pangalawang kaso (sa Windows), ang `bzr-fastimport` ay awtomatikong nag-install gamit ang standalone na bersyon at ang default na pag-install (hayaan ang lahat ng mga checkbox na naka-check).
Kaya wala kang gagawin sa kasong ito.

Sa puntong ito, ang paraan upang mag-import ng isang Bazaar na repositoryo ay naiiba ayon sa kung mayroon kang isang solong branch o nagtatrabaho ka sa isang repositoryo na may ilang mga branch.

===== Proyekto na may isang solong branch

Ngayon mag-`cd` sa iyong direktoryo na naglalaman ng iyong Bazaar na repositoryo at simulan ang Git na repositoryo:

[source,console]
----
$ cd /path/to/the/bzr/repository
$ git init
----

Ngayon, maaari mong simpleng i-export ang iyong Bazaar na repositoryo at palitan ito ng isang Git na repositoryo gamit ang sumusunod na mga utos:

[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

Nakadepende sa laki ng proyekto, ang iyong Git na repositoryo ay nabuo lilipas mula sa ilang mga segundo hanggang sa ilang mga minuto.

===== Kaso ng isang proyekto na may isang pangunahing branch at isang tinatrabahong branch

Maaari ka ring mag-import ng isang Bazaar na repositoryo na naglalaman ng mga branch.
Ipalagay natin na ikaw ay may dalawang mga branch: ang isay nagrerepresenta ng pangunahing branch (myProject.trunk), ang iba pa ay ang tinatrabahong branch (myProject.work).

[source,console]
----
$ ls
myProject.trunk myProject.work
----

Gumawa ng Git na repositoryo at mag-`cd` sa ito:

[source,console]
----
$ git init git-repo
$ cd git-repo
----

I-pull ang master na branch sa git:

[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

I-pull ang tinatrabahong branch sa Git:

[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Ngayon ang `git branch` ay magpapakita sa iyo ang `master` na branch pati na rin ang `work` branch.
Suriin ang mga log upang siguraduhing ang mga ito ay kompleto at alisin ang `marks.bzr` at `marks.git` na mga file.

===== Pagsasabay-sabay ng staging na lawak

Kung anuman ang bilang ng mga branch na mayroon ka at ang import na pamamaraan na ginamit mo, ang iyong staging na lawak ay hindi nagkakasabay sa `HEAD`, at gamit ang import para sa iilang mga branch, ang iyong tinatrabahong direktoryo ay hindi rin nagkakasabay-sabay. 
Ang sitwasyong ito ay madaling malutas sa pamamagitan ng sumusunod na utos:

[source,console]
----
$ git reset --hard HEAD
----

===== Pagwawalang bahala sa mga file na hindi pinansin gamit ang .bzrignore

Ngayon tingnan natin ang mga file na hindi papansinin.
Ang unang bagay na gagawin ay ang pagpangalan muli sa `.bzrignore` ng `.gitignore`.
Kung ang `.bzrignore` na file ay naglalaman ng isa o higit pang mga linya na nagsisimula sa "!!" o "RE:", kailangan mong baguhin ito at marahil gumawa ng iilang `.gitignore` na mga file upang eksaktong hindi pansinin ang parehong mga file na hindi pinapansin ng Bazaar.

Sa katupasan, kailangan mong gumawa ng isang commit na naglalaman ng pagbabagong ito para sa paglipat:

[source,console]
----
$ git mv .bzrignore .gitignore
$ # modify .gitignore if needed
$ git commit -am 'Migration from Bazaar to Git'
----

===== Pagpapadala ng iyong repositoryo sa server

Narito tayo!
Ngayon maaari mong i-push ang repositoryo sa bago nitong tahanan na server:

[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

Ang iyong Git na repositoryo ay handa nang gamitin.
