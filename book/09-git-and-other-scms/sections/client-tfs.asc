==== Git at TFS

(((Pakikipag-ugnayan sa ibang mga VCS, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Ang Git ay nagiging popular sa mga developer ng Windows, at kung ikaw ay sumusulat ng code sa Windows, mayroong magandang posibilidad na ikaw ay gumagamit ng Team Foundation Server (TFS) ng Microsoft.
Ang TFS ay isang kolaborasyon na suite na naglalaman ng kasiraan at work-item na pagmamasid, proseso na sumusuporta para sa Scrum at iba pa, code review, at kontrol ng bersyon.
Mayroong kakaunting kalituhan sa unahan: Ang *TFS* ay ang server, na sumusuporta sa pagkontrol ng source code gamit ang parehong Git at sarili nitong pasadyang VCS, na tinawag nilang *TFVC* (Team Foundation Version Control).
Ang Git na suporta ay isang medyo bagong tampok para sa TFS (ipinapadala kasama ang 2013 na bersyon), kaya lahat ng mga kasangkapan na nauuna sa iyon na tumutukoy sa bersyon-kontrol na bahagi bilang ``TFS'', kahit na sila ay kadalasang nagtatrabaho gamit ang TFVC.

Kung natagpuan mo ang iyong sarili sa isang koponan na gumagamit ng TFVC ngunit gugustuhin mong gumamit ng Git bilang iyong bersyon-kontrol na kliyente, may isang proyekto para sa iyo.

===== Aling Kasangkapan

(((git-tf)))(((git-tfs)))
Sa katunayan, mayroong dalawa: ang git-tf at git-tfs.

Ang Git-tfs (matatagpuan sa https://github.com/git-tfs/git-tfs[]) ay isang .NET na proyekto, at (batay sa pagkakasulat nito) ito ay tumatakbo lamang sa Windows.
Upang magtrabaho gamit ang mga repositoryo ng Git, ito ay gumagamit ng .NET na mga ugnayan para sa libgit2, isang library-oriented na pagpapatupad ng Git na napakainam sa pagganap at nagpapahintulot ng maraming umaangkop sa bituka ng isang Git na repositoryo.
Ang Libgit2 ay hindi isang kompletong pagpapatupad ng Git, kaya upang sakupin ang mga kaibahan ang git-tfs ay talagang tumatawag ng command-line ng Git na kliyente para sa ilang mga operasyon, kaya walang artipisyal na mga hangganan sa kung ano ang maaari nitong gawin sa Git na mga repositoryo.
Ang suporta nito sa TFVC na mga tampok ay sobrang gulang, dahil ito ay gumagamit ng Visual Studio na mga pagpupulong para sa mga operasyon sa mga server.
Ito ay nangangahulugan na kinakailangan mo ng access sa mga pagpupulong na iyon, na nangangahulugang dapat kang mag-install ng isang kamakailang bersyon ng Visual Studio (anumang edisyon mula sa 2010 na bersyon, na nagsasama ng Express mula sa 2012 na bersyon), o ang Visual Studio na SDK.

Ang Git-tf (na ang tahanan ay nasa https://gittf.codeplex.com[]) ay isang Java na proyekto, at dahil dito ay tumatakbo sa anumang kompyuter kasama ang isang Java runtime na enviroment.
Nag-i-interface ito gamit ang Git na mga repostoryo sa pamamagitan ng JGit (isang JVM na pagpapatupad ng Git), na nangangahulugan na ito ay may birtwal na walang mga limitasyon sa termino ng mga function ng Git.
Samantala, ang suporta nito para sa TFVC ay limitado kaysa sa kung ano ang mayroon ng git-tfs – hindi ito sumusuporta ng mga branch, halimbawa.

Kaya bawat kasangkapan ay mayroong mga kalamangan at kahinaan, at mayroong maraming mga sitwasyon na pabor sa isa kaysa sa isa pa.
Sasakupin natin ang mga paunang paggamit nitong dalawa sa librong ito.

[TANDAAN]
====
Kakailanganin mo ng access sa isang TFVC na nakabase na repositoryo upang sumunod sa mga tagubiling ito.
Ang mga ito ay hindi kasing dami sa kagubatan kagaya ng Git o Subversion na mga repositoryo, kaya marahil dapat kang gumawa ng isa para sa iyong sarili.
Ang Codeplex (https://www.codeplex.com[]) o Visual Studio Online (http://www.visualstudio.com[]) ay parehong magandang pagpipilian para rito.
====


===== Pagsisimula: `git-tf`

Ang unang bagay na gagawin mo, katulad ng anumang Git na proyekto, ay mag-clone.
Narito ang kung ano ang hitsura katulad ng nasa `git-tf`:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Ang unang argumento ay ang URL ng isang TFVC na koleksyon, ang pangalawa ay ang URL nakapormang `$/project/branch`, at ang pangatlo ay ang landas patungo sa lokal na repositoryo ng Git na lilikhain (ang panghuli ay opsyonal).
Ang Git-tf ay maaari lamang magtrabaho sa isang branch sa isang pagkakataon; kung gusto mong gumawa ng isang bagong clone mula sa branch na iyon.

Ito ay gumagawa ng isang buong functional na repositoryo ng Git:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Ito ay tinatawag na isang _mababaw_ na clone, na nangangahulugan na ang napapanahong hanay ng pagbabago lamang ang na-download.
Ang TFVC ay hindi nakadesinyo para sa bawat kliyente upang magkaroon ng isang buong kopya ng kasaysayan, kaya ang git-tf na mga default ay kumukuha lamang ng napapanahong bersyon, na higit pang mas mabilis.

Kung mayroon kang ilang oras, marahil ito ay sulit upang i-clone ang buong kasaysayan ng proyekto, gamit ang `--deep` na opsyon:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Pansinin ang mga tag na may mga pangalan katulad ng `TFS_C35189`; ito ay isang tampok na tumutulong sa iyo upang malaman kung anong Git na mga commit ang nauugnay sa TFVC na mga hanay ng pagbabago.
Ito ay isang magandang paraan upang irepresenta ito, dahil maaari mong tingnan gamit ang isang simpleng log na utos kung ano ang iyong mga commit na nauugnay sa isang snapshot na umiiral din sa TFVC.
Sila ay hindi na kinakailangan (at sa katunayan maaari mong i-off ang mga ito gamit ang `git config git-tf.tag false`) – ang git-tf ay pinapanatili ang tunay na commit-changeset na mga pagmapa sa `.git/git-tf` na file.


===== Pagsisimula: `git-tfs`

Ang Git-tfs na pag-clone ay kumikilos ng medyo may kaibahan.
Suriin:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Pansinin ang `--with-branches` na flag.
Ang Git-tfs ay may kakayahang sa pagmapa ng TFVC na mga branch patungo sa Git na mga branch, at ang flag na ito ay sinasabihan ito na mag-set up ng isang lokal na Git na branch para sa bawat TFVC na branch.
Ito ay labis na inirerekomenda kung ikaw ay kailanmang nag-branch o nag-merge sa TFS, ngunit ito ay hindi gagana sa isang mas lumang server kaysa sa TFS 2010 – bago ang release na iyon, ang ``mga branch'' ay mga folder lamang, kaya ang git-tfs ay hindi makakapagsabi sa kanila mula sa regular na mga folder.

Tingnan natin ang resulta na repositoryo ng Git:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

May dalawang lokal na mga branch, ang `master` at `featureA`, na nagrerepresenta ng paunang panimulang punto ng clone (`Trunk` sa TFVC) at isang child na branch (`featureA` sa TFVC).
Maaari mo ring makita na ang `tfs` na ``remote'' ay mayroon ding pares ng refs: ang `default` at `featureA`, na kumakatawan sa TFVC na mga branch.
Ang Git-tfs ay magmamapa ng branch na kung saan ka nag-clone patungo sa `tfs/default`, at ang mga iba pa ay kukuha ng kanilang sariling mga pangalan.

Iba pang bagay na pansinin ay ang `git-tfs-id:` na mga linya sa commit na mga mensahe.
Sa halip na mga tag, ang git-tfs ay gumagamit ng mga marka na ito upang iugnay ang TFVC na mga hanay ng pagbabago sa Git na mga commit.
Ito ay may implikasyon na ang iyong Git na mga commit ay magkakaroon ng isang naiibang SHA-1 na hash bago at pagkatapos sila na-push sa TFVC.

===== Daloy ng trabaho ng Git-tf[s]

[TANDAAN]
====
Anumang kasangkapan ang iyong ginagamit, dapat kang magtakda ng isang pares ng Git na kompigurasyon na mga halaga upang iwasan ang pagpapatakbo nang may mga isyu.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Ang halatang susunod na bagay na gugustuhin mong gawin ay ang pagtrabaho sa proyekto.
Ang TFVC at TFS ay may iilang mga tampok na maaaring magdagdag ng pagkakumplikado sa iyong daloy ng trabaho:

. Ang tampok na mga branch na hindi narepresenta sa TFVC ay nagdaragdag ng kakaunting pagkakumplikado.
  Ito ay walang kinalaman sa *sobrang* magkaibang mga paraan na nirerepresenta ng TFVC at Git na mga branch.
. Magkaroon ng kamalayan na ang TFVC ay nagpapahintulot sa mga user upang mag-``checkout'' ng mga file mula sa server, kinakandado sila upang walang iba na makapag-edit sa kanila.
  Ito ay halatang hindi ka titigilan sa pag-edit sa kanila sa iyong lokal na repositoryo, ngunit ito ay maaaring maghadlang kapag umabot sa panahon upang mag-push ng iyong mga pagbabago sa TFVC na server.
. Ang TFS ay may konsepto na ``gated'' na mga checkin, kung saan ang isang TFS na build-test cycle ay kailangang matagumpay na kompletuhin bago pahintulutan ang checkin.
  Ito ay gumagamit ng ``shelve'' na function sa TFVC, na hindi natin sasakupin nang detalye dito.
    Maaari mong ipeke ito sa isang manwal na anyo gamit ang git-tf, at ang git-tfs ay nagbibigay ng `checkintool` na utos na gate-aware.

Sa interes ng kaigsian, ang ating sasakupin dito ay ang masayang landas, na mga sidestep o nag-iiwas ng halos ng mga isyung ito.

===== Daloy ng trabaho: `git-tf`

Sabihin nating natapos mo ang ilang trabaho, gumawa ng ilang Git na mga commit sa `master`, at handa ka nang ibahagi ang iyong pag-unlad sa TFVC na server.
Narito ang ating Git na repositoryo:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Gusto nating kumuha ng snapshot na nasa `4178a82` na commit at i-push paitaas ito sa TFVC na server.
Unang mga bagay na nauuna: tingnan natin kung anuman sa ating mga kasama sa koponan ay gumawa ng anuman mula nung huli tayong kumonekta:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Mukhang may ibang nagtatrabaho, rin, at ngayon mayroon na tayong magkakaibang kasaysayan.
Ito ay kung saan kumikinang ang Git, ngunit mayroon tayong dalawang pagpipilian kung paano magpatuloy:

. Ang paggawa ng isang merge na commit ay nagdaramdam na natural bilang isang user ng Git (kahit na, iyon ay ang kung ano ang ginagawa ng `git pull`), at ang git-tf ay maaaring gawin ito para sa iyo gamit ang isang simpleng `git tf pull`.
  Magbigay alam, gayunpaman, na ang TFVC ay hindi nag-iisip sa ganitong paraan, at kung ikaw ay magpu-push ng merge na mga commit ang iyong kasaysayan ay magsisimulang magmukhang kakaiba sa parehong banda, na maaaring nakakalito.
  Gayunpaman, kung pinaplano mong magsumite ng lahat ng iyong mga pagbabago bilang isang hanay ng pagbabago, ito na yata ang pinakamadaling mapagpipilian.
. Ang pag-rebase ay ginagawang linear ang ating kasaysayan ng commit, na nangangahulugang mayroon tayong opsyon ng pagpapalit sa bawat isa sa ating Git na mga commit sa isang TFVC na hanay ng pagbabago.
  Dahil iniiwanan nitong bukas ang karamihan sa mga opsyon, inirerekomenda namin na gawin mo ito sa ganitong paraan; ang git-tf ay ginagawang madali ito para sa iyo gamit ang `git tf pull --rebase`.

Ang pagpili ay nasa iyo.
Para sa halimbawang ito, iri-rebase natin ang:
For this example, we'll be rebasing:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Ngayon handa na tayong gumawa ng isang checkin sa TFVC na server.
Ang git-tf ay nagbibigay sa iyo ng pagpipilian sa paggawa ng isang solong hanay ng pagbabago na nagrerepresenta ng lahat ng mga pagbabago mula nung huli (`--shallow`, na ang default) at gumagawa ng isang panibagong hanay ng pagbabago para sa bawat Git na commit (`--deep`).
Para sa halimbawang ito, gagawa lang tayo ng isang hanay ng pagbabago:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Mayroong isang bagong `TFS_C35348` na tag, na nagpapakita na ang TFVC ay nag-iimbak ng eksaktong magkaparehong snapshot sa `5a0e25e` na commit.
Importanteng tandaan na hindi bawat Git na commit ay nangangailangang magkaroon ng eksaktong kopya sa TFVC; ang `6eb3eb5` na commit, halimbawa, ay hindi umiiral saanman sa server.

Ito ay ang pangunahing daloy ng trabaho.
Mayroong iilang ibang konsiderasyon na gugustuhin mong isaisip:

* Walang nang pag-branch.
  Ang Git-tf ay maaari lamang gumawa ng mga repositoryo ng Git mula sa isang TFVC na branch sa isang pagkakataon.
* Pagtulong gamit ang alinman sa TFVC o Git, ngunit hindi ang dalawa.
  Magkaibang git-tf ay magko-clone ng parehong TFVC na repositoryo ay maaaring magkaroon ng magkaibang commit na SHA-1 na mga hash, na magsasanhi ng walang hanggang sakit sa ulo.
* Kung ang daloy ng trabaho ng iyong koponan ay naglalaman ng pagtutulungan sa Git at pana-panahong nagsi-sync sa TFVC, upang komunekta lamang sa TFVC kasama ang isa sa mga repositoryo ng Git.

===== Daloy ng trabaho: `git-tfs`

Maglakad tayo sa parehong senaryo sa paggamit ng git-tfs.
Narito ang bagong mga commit na ginawa natin sa `master` na branch sa ating Git na repositoryo:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Ngayon tingnan natin kung may ibang tao na nakagawa ng trabaho habang tayo nagha-hack sa malayo:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Oo, lumalabas na ang ating kasama sa trabaho ay nagdagdag ng isang bagong TFVC na hanay ng pagbabago, na magpapakita bilang bagong `aea74a0` na commit, at ang `tfs/default` na remote na branch ay lumipat.

Tulad ng git-tf, mayroon tayong dalawang pangunahing mga opsyon para sa kung paano lutasin itong magkakaibang kasaysayan:

. Mag-rebase upang mapreserba ang linear na kasaysayan.
. Mag-merge upang mapreserba ang kung ano talaga ang nangyari.

Sa kasong ito, tayo ay gagawa ng isang ``malalim'' na checkin, kung saan ang bawat Git na commit ay magiging isang TFVC na hanay ng pagbabago, kaya gusto nating mag-rebase.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Ngayon tayo ay handa nang kumpletuhin ang ating pag-ambag sa pamamagitan ng pagtsi-check in ng ating code sa TFVC na server.
Gagamitin natin ang `rcheckin` na utos dito upang lumikha ng isang TFVC na hanay ng pagbabago para sa bawat Git na commit sa landas mula sa HEAD patungo sa unang `tfs` na remote na branch na natagpuan (ang `checkin` na utos ay lilikha lamang ng isang hanay ng pagbabago, tulad ng pagpipi ng Git na mga commit).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Pansinin kung paano pagkatapos ng bawat matagumpay na checkin sa TFVC na server, ang git-tfs ay nagre-rebase ng natitirang trabaho sa kung ano ang ginawa nito.
Iyon ay dahil nagdaragdag ito ng `git-tfs-id` na field sa ilalim ng commit na mga mensahe, na nagbabago sa SHA-1 na mga hash.
Ito ay eksaktong batay sa pagkakadisenyo, at walang dapat ipangamba, ngunit dapat mong bigyang alam na ito ay nangayayri, lalo na kung ikaw ay namamahagi ng mga Git na commit sa iba.

Ang TFS ay may maraming mga tampok na sumasama sa sistema na version control nito, katulad ng mga item ng trabaho, itinalagang mga taga-review, naka-gate na mga checkin, at iba pa.
Maaaring masalimuot na magtrabaho sa mga tampok na ito gamit lamang ang isang command-line na kasangkapan, ngunit sa kabutihang palad ang git-tfs ay hahayaan kang maglunsad ng isang grapikal na checkin na kasangkapan nang sobrang dali:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

Nagmumukha itong medyo ganito:

.The git-tfs checkin tool.
image::images/git-tfs-ct.png[The git-tfs checkin tool.]

Ito ay magmumukhang pamilyar sa mga gumagamit ng TFS, dahil ito ay magkapareho ng diyalogo sa nailunsad mula sa loob ng Visual Studio.

Ang Git-tfs din ay hahayaang kang mag-kontrol ng TFVC na mga branch mula sa iyong Git na repositoryo.
Bilang isang halimbawa, gumawa tayo ng isa:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Ang paggawa ng isang branch sa TFVC ay nangangahulungan sa pagdaragdag ng isang hanay ng pagbabago kung saan ang branch na iyon ay umiiral na ngayon, at ito ay nakapanukala bilang isang Git na commmit.
Tandaan din na ang git-tfs ay *gumawa* ng `tfs/featureBee` na remote na branch, ngunit ang `HEAD` ay nakaturo pa rin sa `master`.
Kung gusto mong magtrabaho sa preskong pagkakagawa na branch, gugustuhin mong magbase ng iyong bagong mga commit sa `1d54865` na commit, marahil sa pamamagitan ng paggawa ng isang paksa na branch mula sa commit na iyon.

===== Git at TFS na Buod

Ang Git-tf at Git-tfs ay parehong dakilang mga kasangkapan para sa pag-interface na may isang TFVC na server.
Pinapayagan ka nilang lokal na gamitin ang kapangyarihan ng Git, umiwas sa patuloy na pagkakaroon ng papunta at pabalik sa sentral na TFVC na server, at gawing sobrang mas madali ang iyong buhay bilang isang developer, na hindi pinipilit ang iyong buong koponan na lumipat sa Git.
Kung ikaw ay nagtatrabaho sa Windows (na pwede kung ang iyong koponan ay gumagamit ng TFS), marahil gugustuhin mong gumamit ng git-tfs, dahil ang hanay tampok nito ay mas kumpleto, ngunit kung ikaw ay nagtatrabaho sa ibang plataporma, gagamitin mo ang git-tf, na mas limitado.
Sa kadalasang mga kasangkapan sa kabanatang ito, dapat kang pumili ng isa sa mga sistema ng version-control na ito upang maging makanoniko, at gamitin ang iba pang isa na nasa isang pantulong na anyo – alinman sa Git o TFVC ang dapat maging sentro ng kolaborasyon, hindi ang dalawa.
