==== Git at Perforce

(((Interoperasyon sa ibang mga VCS, Perforce)))
(((Perforce)))
Ang Perforce ay isang sobrang popular na sistema ng version-control sa korporasyong mga environment.
Ito ay nasa paligid na mula 1995, na ginagawa itong pinakalumang sistema na natalakay sa kabanatang ito.
Tulad nito, ito'y dinisenyo gamit ang ang mga hadlang sa panahon nito; ito ay nagpapalagay na palagi kang konektado sa isang solong sentral na server, at isang beryon lamang ang pinapanatili sa lokal na disk.
Upang maging sigurado, ang mga tampok at mga hadlang nito ay akma sa iilang tiyak na mga problema, ngunit may maraming mga proyekto na gumagamit ng Perforce kung saan ang Git ay aktwal na mas maayos na gumagana.

Mayroong dalawang mga opsyon kung gusto mong paghaluin ang iyong paggamit ng Perforce at Git.
Ang nauuna na tatalakayin natin ay ang ``Git Fusion'' na tulay mula sa mga marka ng Perforce, na nagpapahintulot sa iyo na ilantad ang mga subtree ng iyong Perforce depot bilang read-write na mga repositoryo ng Git.
Ang pangalawa ay ang git-p4, isang client-side na tulay na hahayaan kang gumamit ng Git bilang isang Perforce na kliyente, nang hindi nangangailangan ng anumang muling pagsasaayos ng Perforce server.

[[_p4_git_fusion]]
===== Pagsasanib ng Git

(((Perforce, Pagsasanib ng Git)))
Ang Perforce ay nagbibigay ng isang produkto na tinatawag na Pagsasanib ng Git (makukuha sa http://www.perforce.com/git-fusion[]), na pinagsasabay ang isang Perforce na server sa Git na mga repositoryo sa panig ng server.

====== Pag-set Up

Para sa ating mga halimbawa, gagamit tayo ng pinakamadaling pag-install na pamamaraan para sa Git Fusion, na nagda-donwload ng isang virtual na makina na nagpapatakbo ng Perforce daemon at Git Fusion.
Maaari mong kunin ang imahe ng virtual na makina mula sa http://www.perforce.com/downloads/Perforce/20-User[], at kapag ito ay natapos nang mag-download, i-import ito sa iyong paboritong virtualization na software (gagamit tayo ng VirtualBox).

Sa unang pagsisimula sa makina, tatanungin ka nito na i-customize ang password para sa tatlong Linux na mga gumagamit (`root`, `perforce`, at `git`), at magbigay ng isang instance na pangalan, na maaaring gamitin upang makilala ang pag-install na ito mula sa mga iba sa parehong network.
Kapag nakumpleto ng iyon ang lahat, makikita mo ito:

.Ang boot screen ng virtual na makina ng Git Fusion
image::images/git-fusion-boot.png[Ang boot screen ng virtual na makina ng Git Fusion.]

Dapat mong tandaan ang IP address na ipinakita dito, gagamitin natin ito mamaya.
Susunod, lilikha tayo ng isang Perforce na gumagamit.
Piliin ang ``Login'' na opsyon sa ibaba at pindutin ang enter (o SSH sa makina), at mag-log in bilang `root`.
Pagkatapos ay gamitin ang mga utos na ito upang lumikha ng isang gumagamit:

[source,console]
----
$ p4 -p localhost:1666 -u super user -f john
$ p4 -p localhost:1666 -u john passwd
$ exit
----

Ang nauuna ay magbubukas ng isang VI na editor upang i-customize ang gumagamit, ngunit maaari mong tanggapin ang mga default sa pamamagitan ng pag-type ng `:wq` at pagpindot ng enter.
Ang pangalawa ay didiktahan kang magpasok ng isang password nang dalawang beses.
Iyan lahat ang kakailanganing gawin natin sa isang shell prompt, kaya lumabas sa sesyon.

Ang sunod na bagay na kakailanganing gawin upang sumunod ay sabihan ang Git na huwang patunayan ang SLL na mga sertipiko.
Ang Git Fushion na imahe ay nagsasama ng isang sertipiko, ngunit ito ay para sa isang domain na hindi tutugma sa iyong IP address ng virtual na makina, kaya ang Git ay tatanggihan ang HTTPS na koneksyon.
Kung ito ay magiging isang permanenteng pag-install, konsultahin ang Perforce Git Fusion na manwal upang mag-install ng isang naiibang sertipiko; para sa mga hangarin ng ating halimbawa, ito ay sapat lamang:

[source,console]
----
$ export GIT_SSL_NO_VERIFY=true
----

Ngayon maaari nating subukan na ang lahat ay gumagana.

[source,console]
----
$ git clone https://10.0.1.254/Talkhouse
Cloning into 'Talkhouse'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.
----

Ang virtual-machine na imahe ay dumarating nang may kasangkapan na isang halimbawang proyekto na maaari mong i-clone.
Dito tayo ay nagko-clone sa HTTPS, gamit ang `john` na gumagamit na ginawa natin sa itaas; ang Git ay magtatanong para sa mga kredensyal para sa koneksyong ito, ngunit ang kredensyal na cache ay papayagan tayong lumaktaw sa hakbang na ito para sa anumang kasunod na mga kahilingan.

====== Kumpigurasyon ng Fusion

Kapag na-install mo na ang Git Fusion, gugustuhin mong i-tweak ang kumpigurasyon.
Ito ay talagang patas na madaling gawin gamit ang iyong paboritong Perforce na kliyente; i-mapa lamang ang `//.git-fusion` na direktoryo sa server ng Perforce patungo sa iyong workspace.
Ang istraktura ng file ay magmumukhang katulad nito:

[source,console]
----
$ tree
.
├── objects
│   ├── repos
│   │   └── [...]
│   └── trees
│       └── [...]
│
├── p4gf_config
├── repos
│   └── Talkhouse
│       └── p4gf_config
└── users
    └── p4gf_usermap

498 directories, 287 files
----

Ang `objects` na direktoryo ay panloob na ginagamit ng Git Fusion upang i-mapa ang mga bagay ng Perforce sa Git at kabaligtaran, hindi mo na kailangang guluhin ang anumang nandoon.
May isang global na `p4gf_config` na file sa direktoryong ito, pati na rin sa bawat repositoryo – ang mga ito ay kumpigurasyon na mga file na tumutukoy kung paano kumikilos ang Git Fusion.
Tingnan natin ang file sa root:

[source,ini]
----
[repo-creation]
charset = utf8

[git-to-perforce]
change-owner = author
enable-git-branch-creation = yes
enable-swarm-reviews = yes
enable-git-merge-commits = yes
enable-git-submodules = yes
preflight-commit = none
ignore-author-permissions = no
read-permission-check = none
git-merge-avoidance-after-change-num = 12107

[perforce-to-git]
http-url = none
ssh-url = none

[@features]
imports = False
chunked-push = False
matrix2 = False
parallel-push = False

[authentication]
email-case-sensitivity = no
----

Hindi na tayo pumasok pa sa mga kahulugan ng mga flag na ito dito, ngunit tandaan na ito ay isang INI-formatted text na file lamang, masyadong katulad ng ginigamit ng Git para sa kumpigurasyon.
Ang file na ito ay tinutukoy ang global na mga opsyon, na maaaring i-override ng mga file na repository-specific na kumpigurasyon, katulad ng `repos/Talkhouse/p4gf_config`.
Kung bubuksan mo ang file na ito, makikita mo ang isang `[@repo]` na seksyon na may ilang mga setting na naiiba sa global na mga default.
Makikita mo rin ang mga seksyon na nagmumukhang katulad nito:

[source,ini]
----
[Talkhouse-master]
git-branch-name = master
view = //depot/Talkhouse/main-dev/... ...
----

Ito ay isang pagmapa sa pagitan ng isang Perfoce na branch at isang Git na branch.
Ang seksyon ay maaaring pangalanan sa kung anuman ang gugustuhin mo, hangga't ang pangalan ay natatangi.
Ang `git-branch-name` ay hahayaan kang palitan ang isang depot na landas na maaaring maging masalimuot sa ilalim ng Git ng isang mas palakaibigan na pangalan.
Ang `view` na setting ay namamahala kung paano namapa ang mga file ng Perforce sa Git na repositoryo, gamit ang syntax ng standard view ng pagmapa.
Higit pa sa isang pagmapa ang maaaring matukoy, kagaya ng halimbawang ito:

[source,ini]
----
[multi-project-mapping]
git-branch-name = master
view = //depot/project1/main/... project1/...
       //depot/project2/mainline/... project2/...
----

Sa paraang ito, kung ang iyong normal na pagmapa ng workspace ay nagsasama ng mga pagbabago sa istraktura ng mga direktoryo, maaari mong kopyahin iyon gamit ang isang Git na repositoryo.

Ang huling file na tatalakayin natin ay ang `users/p4gf_usermap`, na nagmamapa ng Perforce na mga gumagamit, at maaaring hindi mo na kakailanganin.
Kapag ikaw ay ng nagpapalit mula sa isang Perforce na changeset patungo sa isang Git na commit, ang default na pag-uugali ng Git Fusion ay ang paghahanap sa Perforce na gumagamit, at gagamit ng email address at buong pangalan na naka-imbak doon para sa may-akda/taga-commit na patlang sa Git.
Kapag nagpapalit sa ibang paraan, ang default ay ang paghahanap ng Perforce na gumagamit na may email address na naka-imbak sa may-akda na field ng Git na commit, at isusumite ang changeset bilang gumagamit na iyon (na may mga permiso na inilalapat).
Sa karamihang mga kaso, ang pag-uugaling ito ay maayos lamang, ngunit isaalang-alang ang sumusunod na pagmapa na file:

[source]
----
john john@example.com "John Doe"
john johnny@appleseed.net "John Doe"
bob employeeX@example.com "Anon X. Mouse"
joe employeeY@example.com "Anon Y. Mouse"
----

Ang bawat linya ay naka-format na `<user> <email> "<full name>"`, at lumilikha ng isang solong gumagamit na pagmapa.
Ang unang dalawang mga linya ay nagmamapa ng dalawang naiibang mga email address sa parehong Perforce user na account.
Ito ay kapaki-pakinabang kung ikaw ay nakagawa ng Git na mga commit sa ilalim ng ilang magkaibang mga email address (o nagbago ng mga email address), ngunit gusto silang mamapa sa parehong Perforce na gumagamit.
Kapag lumilikha ng isang Git na commit mula sa isang Perforce na changeset, ang unang linya na tumutugma sa Perforce na gumagamit ay gagamitin para sa impormasyon ng Git authorship.

Ang huling dalawang mga linya ay nagmamaskara sa aktwal na mga pangalan at mga email address nina Bob at Joe mula sa Git na mga commit na nilikha.
Ito ay maganda kung gusto mong mag-open-source ng isang panloob na proyekto, ngunit hindi gustong i-publish ang iyong employee na direktoryo sa buong mundo.
Tandaan na ang mga email address at buong mga pangalan ay dapat natatangi, maliban kung gusto mong ipalagay ang lahat ng Git na mga commit sa isang solong kathang-isip na may-akda.

====== Workflow

Ang Git Fusion ng Perforce ay isang dalawang-daanan na tulay sa pagitan ng Perfoce at Git na version control.
Tingnan natin kung ano ang pakiramdam sa pagtatrabaho mula sa panig ng Git.
Ating ipalagay na nagmapa tayo sa ``Jam'' na proyekto gamit ang isang kumpigurasyon na file na ipinakita sa itaas, na maaari nating i-clone katulad nito:

[source,console]
----
$ git clone https://10.0.1.254/Jam
Cloning into 'Jam'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/rel2.1
$ git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam's NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone's lynx port.
[...]
----

Sa unang pagkakataon na gagawin natin ito, maaari itong magtagal ng ilang saglit.
Ang nangyayari ay ang Git Fusion ay nagpapalit sa lahat ng naaangkop na mga changeset sa kasaysayan ng Perforce patungo sa Git na mga commit.
Ito ay lokal na nangyayari sa server, kaya ito ay relatibong mabilis, ngunit kung mayroon kang maraming kasaysayan, maaari rin itong tumagal ng ilang sandali.
Ang kasunod na mga fetch ay gumagawa ng incremental na pagpapalit, kaya ito ay nararamdaman na mas katulad sa likas na bilis ng Git. 

Batay sa iyong nakikita, ang ating repositoryo ay namumukhang eksaktong katulad ng ibang Git na repositoryo na maaari mong trabahuan.
Mayroong tatlong mga branch, at ang Git ay nakakatulong na gumawa ng isang lokal na `master` na branch na sumusubaybay sa `origin/master`.
Gumawa tayo ng kaunting trabaho, at lumikha ng ilang bagong mga commit:

[source,console]
----
# ...
$ git log --oneline --decorate --graph --all
* cfd46ab (HEAD, master) Add documentation for new feature
* a730d77 Whitespace
* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Mayroon tayong dalawang bagong mga commit.
Ngayon suriin natin kung may ibang taong nagtatrabaho:

[source,console]
----
$ git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://10.0.1.254/Jam
   d254865..6afeb15  master     -> origin/master
$ git log --oneline --decorate --graph --all
* 6afeb15 (origin/master, origin/HEAD) Update copyright
| * cfd46ab (HEAD, master) Add documentation for new feature
| * a730d77 Whitespace
|/
* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Mukhang mayroon nga!
Hindi mo na kailangang malaman ito mula sa pananaw na ito, ngunit ang `6afeb15` na commit ay aktwal na nilikha gamit ang isang Perforce na kliyente.
Ito ay magmumukha lamang na ibang commit mula sa pananaw ng Git, na eksakto ang punto.
Tingnan natin kung paano nakikitungo ang Perforce na server sa isang merge na commit:

[source,console]
----
$ git merge origin/master
Auto-merging README
Merge made by the 'recursive' strategy.
 README | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
remote: Perforce: 100% (3/3) Loading commit tree into memory...
remote: Perforce: 100% (5/5) Finding child commits...
remote: Perforce: Running git fast-export...
remote: Perforce: 100% (3/3) Checking commits...
remote: Processing will continue even if connection is closed.
remote: Perforce: 100% (3/3) Copying changelists...
remote: Perforce: Submitting new Git commit objects to Perforce: 4
To https://10.0.1.254/Jam
   6afeb15..89cba2b  master -> master
----

Ang Git ay iisiping ito ay gumagana.
Tingnan natin ang kasaysayan ng `README` na file mula sa pananaw ng Perforce, gamit ang tampok na revision graph ng `p4v`:

.Revision graph ng Perforce na resulta mula sa Git push.
image::images/git-fusion-perforce-graph.png[Revision graph ng Perforce na resulta mula sa Git push.]

Kung hindi ka pa nakakakita ng ganitong pananaw dati, ito ay maaaring magmistulang nakakalito, ngunit ito ay nagpapakita ng parehong mga konsepto bilang isang grapikal na viewer para sa kasaysayan ng Git.
Tayo ay tumitingin sa kasaysayan ng `README` na file, kaya ang direktoryo na tree sa kaliwang itaas ay nagpapakita lamang ng file habang ito ay lumutang sa magkaibang mga branch.
Sa kanang itaas, mayroon tayong isang biswal na graph ng paano ang magkaibang mga revision ng file ay nauugnay, at ang malaking larawan na pananaw sa graph na ito sa kanang ibaba.
Ang natitirang pananaw ay binigay sa mga detalye na pananaw para sa napiling revision (`2` sa kasong ito).

Isang bagay na pansinin ay ang graph ay nagmumukhang eksaktong katulad ng isa na nasa kasaysayan ng Git.
Ang Perforce ay hindi nagkaroon ng isang nakapangalang branch para iimbak ang `1` at `2` na mga commit, kaya ito ay gumawa ng isang ``anonymous'' na branch sa `.git-fusion` na direktoryo upang panghawakan ito.
Ito rin ay mangyayari para sa nakapangalang mga branch ng Git na hindi tumutugma sa isang nakapangalang Perforce na branch (at maaari mong i-mapa mamaya ang mga iyon sa isang Perforce na branch gamit ang kumpigurasyon na file).

Karamihan sa ito ay nangyayari sa likod na mga eksena, ngunit ang huling resulta ay ang isang tao sa isang koponan ay maaaring gumagamit ng Git, ang iba pa ay gumagamit ng Perforce, at ni isa sa kanila ay hindi malalaman ang tungkol sa pinili ng isa.

====== Buod ng Git-Fusion

Kung ikaw ay mayroong (o maaaring makakuha ng) access sa iyong Perforce na server, ang Git Fusion ay isang dakilang paraan upang ganap na papag-usapin sa isa't isa ang Git at Perforce.
Mayroong kauting kumpigurasyon na kasangkot, ngunit ang pag-aaral ay hindi masyadong matarik.
Ito ay isa sa ilang mga seksyon sa kabanatang ito kung saan ang pag-iigat tungkol sa paggamit ng buong kapangyarihan ng Git ay hindi magpapakita.
Hindi nito sinasabi na ang Perforce ay magiging masaya sa lahat ng tinatapon sa ito – kung susubukan mong isulat muli ang kasaysayan na na-push na, tatanggihan ito ng Git Fusion – ngunit matiyagang susubukan ng Git Fusion na magramdam na likas.
Maaari mo ring gamitin ang Git na mga submodule (bagaman ang mga iyon ay magmumukhang kakaiba sa Perforce na mga gumagamit), at mag-merge ng mga branch (ito ay itatala bilang isang integrasyon sa panig ng Perforce).

If you can't convince the administrator of your server to set up Git Fusion, there is still a way to use these tools together.

[[_git_p4_client]]
===== Git-p4

(((git commands, p4)))
Git-p4 is a two-way bridge between Git and Perforce.
It runs entirely inside your Git repository, so you won't need any kind of access to the Perforce server (other than user credentials, of course).
Git-p4 isn't as flexible or complete a solution as Git Fusion, but it does allow you to do most of what you'd want to do without being invasive to the server environment.

[NOTE]
======
You'll need the `p4` tool somewhere in your `PATH` to work with git-p4.
As of this writing, it is freely available at http://www.perforce.com/downloads/Perforce/20-User[].
======

====== Setting Up

For example purposes, we'll be running the Perforce server from the Git Fusion OVA as shown above, but we'll bypass the Git Fusion server and go directly to the Perforce version control.

In order to use the `p4` command-line client (which git-p4 depends on), you'll need to set a couple of environment variables:

[source,console]
----
$ export P4PORT=10.0.1.254:1666
$ export P4USER=john
----

====== Getting Started

As with anything in Git, the first command is to clone:

[source,console]
----
$ git p4 clone //depot/www/live www-shallow
Importing from //depot/www/live into www-shallow
Initialized empty Git repository in /private/tmp/www-shallow/.git/
Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master
----

This creates what in Git terms is a ``shallow'' clone; only the very latest Perforce revision is imported into Git; remember, Perforce isn't designed to give every revision to every user.
This is enough to use Git as a Perforce client, but for other purposes it's not enough.

Once it's finished, we have a fully-functional Git repository:

[source,console]
----
$ cd myproject
$ git log --oneline --all --graph --decorate
* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head
----

Note how there's a ``p4'' remote for the Perforce server, but everything else looks like a standard clone.
Actually, that's a bit misleading; there isn't actually a remote there.

[source,console]
----
$ git remote -v
----

No remotes exist in this repository at all.
Git-p4 has created some refs to represent the state of the server, and they look like remote refs to `git log`, but they're not managed by Git itself, and you can't push to them.

====== Workflow

Okay, let's do some work.
Let's assume you've made some progress on a very important feature, and you're ready to show it to the rest of your team.

[source,console]
----
$ git log --oneline --all --graph --decorate
* 018467c (HEAD, master) Change page title
* c0fb617 Update link
* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head
----

We've made two new commits that we're ready to submit to the Perforce server.
Let's check if anyone else was working today:

[source,console]
----
$ git p4 sync
git p4 sync
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12142 (100%)
$ git log --oneline --all --graph --decorate
* 75cd059 (p4/master, p4/HEAD) Update copyright
| * 018467c (HEAD, master) Change page title
| * c0fb617 Update link
|/
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Looks like they were, and `master` and `p4/master` have diverged.
Perforce's branching system is _nothing_ like Git's, so submitting merge commits doesn't make any sense.
Git-p4 recommends that you rebase your commits, and even comes with a shortcut to do so:

[source,console]
----
$ git p4 rebase
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
No changes to import!
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
Applying: Update link
Applying: Change page title
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

You can probably tell from the output, but `git p4 rebase` is a shortcut for `git p4 sync` followed by `git rebase p4/master`.
It's a bit smarter than that, especially when working with multiple branches, but this is a good approximation.

Now our history is linear again, and we're ready to contribute our changes back to Perforce.
The `git p4 submit` command will try to create a new Perforce revision for every Git commit between `p4/master` and `master`.
Running it drops us into our favorite editor, and the contents of the file look something like this:

[source,console]
----
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Type:        Either 'public' or 'restricted'. Default is 'public'.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


######## git author ben@straub.cc does not match your p4 account.
######## Use option --preserve-user to modify authorship.
######## Variable git-p4.skipUserNameCheck hides this message.
######## everything below this line is just the diff #######
--- //depot/www/live/index.html  2014-08-31 18:26:05.000000000 0000
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 18:26:05.000000000 0000
@@ -60,7 +60,7 @@
 </td>
 <td valign=top>
 Source and documentation for
-<a href="http://www.perforce.com/jam/jam.html">
+<a href="jam.html">
 Jam/MR</a>,
 a software build tool.
 </td>
----

This is mostly the same content you'd see by running `p4 submit`, except the stuff at the end which git-p4 has helpfully included.
Git-p4 tries to honor your Git and Perforce settings individually when it has to provide a name for a commit or changeset, but in some cases you want to override it.
For example, if the Git commit you're importing was written by a contributor who doesn't have a Perforce user account, you may still want the resulting changeset to look like they wrote it (and not you).

Git-p4 has helpfully imported the message from the Git commit as the content for this Perforce changeset, so all we have to do is save and quit, twice (once for each commit).
The resulting shell output will look something like this:

[source,console]
----
$ git p4 submit
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Synchronizing p4 checkout...
... - file(s) up-to-date.
Applying dbac45b Update link
//depot/www/live/index.html#4 - opened for edit
Change 12143 created with 1 open file(s).
Submitting change 12143.
Locking 1 files ...
edit //depot/www/live/index.html#5
Change 12143 submitted.
Applying 905ec6a Change page title
//depot/www/live/index.html#5 - opened for edit
Change 12144 created with 1 open file(s).
Submitting change 12144.
Locking 1 files ...
edit //depot/www/live/index.html#6
Change 12144 submitted.
All commits applied!
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12144 (100%)
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
$ git log --oneline --all --graph --decorate
* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

The result is as though we just did a `git push`, which is the closest analogy to what actually did happen.

Note that during this process every Git commit is turned into a Perforce changeset; if you want to squash them down into a single changeset, you can do that with an interactive rebase before running `git p4 submit`.
Also note that the SHA-1 hashes of all the commits that were submitted as changesets have changed; this is because git-p4 adds a line to the end of each commit it converts:

[source,console]
----
$ git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe <john@example.com>
Date:   Sun Aug 31 10:31:44 2014 -0800

    Change page title

    [git-p4: depot-paths = "//depot/www/live/": change = 12144]
----

What happens if you try to submit a merge commit?
Let's give it a try.
Here's the situation we've gotten ourselves into:

[source,console]
----
$ git log --oneline --all --graph --decorate
* 3be6fd8 (HEAD, master) Correct email address
*   1dcbf21 Merge remote-tracking branch 'p4/master'
|\
| * c4689fc (p4/master, p4/HEAD) Grammar fix
* | cbacd0a Table borders: yes please
* | b4959b6 Trademark
|/
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

The Git and Perforce history diverge after 775a46f.
The Git side has two commits, then a merge commit with the Perforce head, then another commit.
We're going to try to submit these on top of a single changeset on the Perforce side.
Let's see what would happen if we tried to submit now:

[source,console]
----
$ git p4 submit -n
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would apply
  b4959b6 Trademark
  cbacd0a Table borders: yes please
  3be6fd8 Correct email address
----

The `-n` flag is short for `--dry-run`, which tries to report what would happen if the submit command were run for real.
In this case, it looks like we'd be creating three Perforce changesets, which correspond to the three non-merge commits that don't yet exist on the Perforce server.
That sounds like exactly what we want, let's see how it turns out:

[source,console]
----
$ git p4 submit
[…]
$ git log --oneline --all --graph --decorate
* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address
* 1b79a80 Table borders: yes please
* 0097235 Trademark
* c4689fc Grammar fix
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Our history became linear, just as though we had rebased before submitting (which is in fact exactly what happened).
This means you can be free to create, work on, throw away, and merge branches on the Git side without fear that your history will somehow become incompatible with Perforce.
If you can rebase it, you can contribute it to a Perforce server.

[[_git_p4_branches]]
====== Branching

If your Perforce project has multiple branches, you're not out of luck; git-p4 can handle that in a way that makes it feel like Git.
Let's say your Perforce depot is laid out like this:

[source]
----
//depot
  └── project
      ├── main
      └── dev
----

And let's say you have a `dev` branch, which has a view spec that looks like this:

[source]
----
//depot/project/main/... //depot/project/dev/...
----

Git-p4 can automatically detect that situation and do the right thing:

[source,console]
----
$ git p4 clone --detect-branches //depot/project@all
Importing from //depot/project@all into project
Initialized empty Git repository in /private/tmp/project/.git/
Importing revision 20 (50%)
    Importing new branch project/dev

    Resuming with change 20
Importing revision 22 (100%)
Updated branches: main dev
$ cd project; git log --oneline --all --graph --decorate
* eae77ae (HEAD, p4/master, p4/HEAD, master) main
| * 10d55fb (p4/project/dev) dev
| * a43cfae Populate //depot/project/main/... //depot/project/dev/....
|/
* 2b83451 Project init
----

Note the ``@all'' specifier in the depot path; that tells git-p4 to clone not just the latest changeset for that subtree, but all changesets that have ever touched those paths.
This is closer to Git's concept of a clone, but if you're working on a project with a long history, it could take a while.

The `--detect-branches` flag tells git-p4 to use Perforce's branch specs to map the branches to Git refs.
If these mappings aren't present on the Perforce server (which is a perfectly valid way to use Perforce), you can tell git-p4 what the branch mappings are, and you get the same result:

[source,console]
----
$ git init project
Initialized empty Git repository in /tmp/project/.git/
$ cd project
$ git config git-p4.branchList main:dev
$ git clone --detect-branches //depot/project@all .
----

Setting the `git-p4.branchList` configuration variable to `main:dev` tells git-p4 that ``main'' and ``dev'' are both branches, and the second one is a child of the first one.

If we now `git checkout -b dev p4/project/dev` and make some commits, git-p4 is smart enough to target the right branch when we do `git p4 submit`.
Unfortunately, git-p4 can't mix shallow clones and multiple branches; if you have a huge project and want to work on more than one branch, you'll have to `git p4 clone` once for each branch you want to submit to.

For creating or integrating branches, you'll have to use a Perforce client.
Git-p4 can only sync and submit to existing branches, and it can only do it one linear changeset at a time.
If you merge two branches in Git and try to submit the new changeset, all that will be recorded is a bunch of file changes; the metadata about which branches are involved in the integration will be lost.

===== Git and Perforce Summary

Git-p4 makes it possible to use a Git workflow with a Perforce server, and it's pretty good at it.
However, it's important to remember that Perforce is in charge of the source, and you're only using Git to work locally.
Just be really careful about sharing Git commits; if you have a remote that other people use, don't push any commits that haven't already been submitted to the Perforce server.

If you want to freely mix the use of Perforce and Git as clients for source control, and you can convince the server administrator to install it, Git Fusion makes using Git a first-class version-control client for a Perforce server.
