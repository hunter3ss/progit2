==== Subversion

(((Subversion)))
(((Pag-import, mula sa Subversion)))
Kung nabasa mo ang nakaraang seksyon tungkol sa paggamit ng `git svn`, maaari mong madaling gamitin ang mga instruksyon sa `git svn clone` ng isang repositoryo; pagkatapos, huminto sa paggamit ng Subversion na server, mag-push sa isang bagong Git na server, at simulan ang paggamit nito.
Kung gusto mo ang kasaysayan, makukuha mo ito nang mabilisan dahil maaari kang mag-pull ng datos palabas sa Subversion na server (na maaaring magtagal).

Samantala, ang import ay hindi perpekto; at dahil ito ay lilipas ng matagal, mangyaring gawin mo ito nang tama.
Ang unang problema ay ang impormasyon ng may-akda.
Sa Subversion, bawat tao na nag-commit ay may isang user sa sistema na nakatalaga sa commit na impormasyon.
Ang mga halimbawa sa nakaraang seksyon ay nagpapakita ng `schacon` sa ilang mga lugar, kagaya ng `blame` na output at ang `git svn log`.
Kung gusto mong mag-map nito sa mas mabuting datos ng Git na may-akda, kailangan mo ng isang pag-map mula sa Subversion na mga user sa mga Git na may-akda.
Gumawa ng isang file na tinatawag na `users.txt` na mayroon nitong pag-map sa isang format katulad nito:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Upang makakuha ng isang listahan ng mga pangalan ng may-akda na ginagamit ng SVN, maaari mong patakbuhin ito:

[source,console]
----
$ svn log --xml --quiet | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Iyon ay maglilikha ng log na output na nasa XML na format, at papanatilihin lamang ang mga linya na may impormasyon ng may-akda, tatanggalin ang mga magkakapareho, buburahin ang mga tag na XML.
(Halatang ito ay gumagana lamang sa isang makina na may `grep`, `sort`, at `perl` na naka-install.)
Pagkatapos, ipasa ang output na iyon sa iyong `users.txt` na file upang maaari kang magdagdag ng katumbas na datos ng Git na user na kasunod sa bawat entrada.

Maaari mong ibigay ang file na ito sa `git svn` upang tulungan itong i-map ang may-akda na datos nang mas wasto.
Maaari mo ring sabihan ang `git svn` na huwag ilakip ang metadata na normal na ini-import ng Subversion, sa pamamagitan ng pagpasa ng `--no-metadata` sa ` `clone` o `init` na utos (bagaman kung gusto mong panatilihin ang synchronisation-metadata, walang anumang iwan ang parameter na ito).
Ginagawa nitong mukhang ganito ang iyong `import` na utos:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata --prefix "" -s my_project
$ cd my_project
----

Ngayon dapat kang magkaroon ng isang mas magandang Subverion na import sa iyong `my_project` na direktoryo.
Sa halip ng mga commit na nagmumukhang katulad nito

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

magmumukha silang katulad nito:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Hindi lang nagmumukhang mas maayos ang May-akda na field, subalit ang `git-svn-id` ay wala na rin doon.

Kailangan mo ring gumawa ng kakaunting paglilinis sa post-import. 
Para sa isang bagay, dapat mong linisin ang kakaibang mga reperensya na itinakda ng `git svn`.
Una ililipat mo ang mga tag upang sila ay maging aktwal na mga tag sa halip na kakaibang remote na mga branch, at pagkatapos ay ililipat mo ang natitirang mga branch upang sila ay maging lokal.

Upang maglipat ng mga tag upang maging nararapat na Git na mga tag, patakbuhin ang:

[source,console]
----
$ for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t && git branch -D -r $t; done
----

Kukunin nito ang mga reperensya na remote na mga branch na nagsisimula sa `refs/remotes/tags/` at gagawin silang tunay (magaan) na mga tag.

Susunod, ilipat ang natitira sa mga reperensya sa ilalim ng `refs/remotes` upang maging lokal ng mga branch:

[source,console]
----
$ for b in $(git for-each-ref --format='%(refname:short)' refs/remotes); do git branch $b refs/remotes/$b && git branch -D -r $b; done
----

Maaaring mangyari na makikita mo ang ilang karagdagang mga branch na naka-suffix ng `@xxx` (kung saan ang xxx ay isang numero), habang sa Subversion makakakita ka lamang ng isang branch.
Ito ay isang aktwal na tampok ng Subversion na tinatawag na ``peg-revisions'', na isang bagay na simpleng walang sintaktikal na katumbas sa Git.
Kaya, ang `git svn` ay simpleng nagdaragdag ng numero ng svn na bersyon sa pangalan ng branch sa parehong paraan lamang katulad ng pagsulat mo nito sa svn upang isalaysay ang peg-revision sa branch na iyon.
Kung wala ka nang pakialam tungkol sa mga peg-revision, simpleng burahin ang mga iyon:

[source,console]
----
$ for p in $(git for-each-ref --format='%(refname:short)' | grep @); do git branch -D $p; done
----

Ngayon lahat ng lumang mga branch ay tunay na Git na mga branch at lahat ng lumang mga tag ay tunay na Git na mga tag.

Mayroong isang huling bagay na dapat linisin.
Sa kasamaang palad, ang `git svn` ay gumagawa ng isang karagdag na branch na nakapangalang `trunk`, na nagma-map sa default na branch ng Subversion, ngunit ang `trunk` na ref ay tumuturo sa parehong lugar ng `master`.
Dahil ang `master` ay mas kawikaing Git, narito ang kung papaano magtanggal ng karagdagang branch:

[source,console]
----
$ git branch -d trunk
----

Ang huling bagay na gagawin ay ang pagdagdag ng iyong bagong Git na server bilang isang remote at mag-push dito.
Narito ang isang halimbawa ng pagdaragdag ng iyong server bilang isang remote:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Dahil gusto mong lahat ng iyong mga branch at mga tag na pumunta paitaas, maaari mo nang patakbuhin ito:

[source,console]
----
$ git push origin --all
$ git push origin --tags
----

Ang lahat ng iyong mga branch at tag ay dapat nasa iyong bagong Git na server na nasa isang maganda, malinis na import.
