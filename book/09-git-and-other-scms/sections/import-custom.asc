[[_custom_importer]]
==== Isang Pasadyang Importer

(((git na mga utos, fast-import)))
(((Pag-import, mula sa mga iba)))
Kung ang iyong sistema ay hindi isa sa nasa itaas, kailangan mong maghanap ng isang importer sa online - ang kalidad na mga importer ay maaaring magamit para sa maraming ibang mga sistema, kalakip na ang CVS, Clear Case, Visual Source Safe, kahit isang direktoryo ng mga archive.
Kung wala sa mga kasangkapan ang gumagana para sa iyo, mayroon kang isang mas nakakubling kasangkapan, o kung hindi man ay kailangan mo ng isang mas pasadyang pag-import na proseso, kailangan mong gamitin ang `git fast-import`.
Ang utos na ito ay nagbabasa ng simpleng mga tagubilin mula sa stdin upang magsulat ng nakatukoy na Git na datos.
Mas madaling gumawa ng mga object ng Git sa ganitong paraan kaysa sa pagpapatakbo ng hilaw na mga utos ng Git o subukang sumulat ng hilaw na mga object (tingnan ang <<_git_internals#_git_internals>> para sa karagdang impormasyon).
Sa paraang ito, maaari kang magsulat ng isang import na iskrip na nagbabasa ng nararapat na impormasyon sa labas ng sistema na iyong ini-import at tuluyang ipi-print ang mga tagubilin sa stdout.
Maaari mo na ring patakbuhin ang programang ito at i-pipe ang mga output nito sa pamamagitan ng `git fast-import`.

Upang madaliang ipakita, magsusulat ka ng isang simpleng importer.
Ipagpalagay na ikaw ay nagtatrabaho sa `current`, iba-back up mo ang iyong proyekto sa pamamagitan ng paminsan-minsang pagkopya ng direktoyo sa isang naka-time-stamp na `back_YYYY_MM_DD` na direktoryo ng backup, at gusto mong i-import ito sa Git.
Ang istraktura ng iyong direktoryo ay magmumukhang katulad nito:

[source,console]
----
$ ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current
----

Upang mag-import ng isang Git na direktoryo, kailangan mong pagsuriin kung paano nag-iimbak ang Git ng datos nito.
Tulad ng maaari mong matandaan, ang Git ay panimulang isang naka-link na listahan ng commit na mga object na tumuturo sa isang snapshot ng nilalaman.
Ang kailangan mo lang gawin ay sabihan ng `fast-import` kung ano ang content na mga snapshot, ano ang commit na datos na tumuturo sa kanila, at ang pagkakaayos ng pagpasok nila.
Ang iyong estratehiya ay ang pagpunta sa mga snapshot nang iisa sa bawat pagkakataon at gumawa ng mga commit gamit ang mga nilalaman sa bawat direktoryo, pag-ugnayin ang bawat commit pabalik sa isang nakaraan.

Katulad ng ginawa natin sa <<_customizing_git#_an_example_git_enforced_policy>>, susulatin natin ito sa Ruby, dahil ito ay kadalasang ating trabaho at malamang ito ay madaling basahin.
Maaari mong isulat ang halimbawang ito ng sobrang madali sa anumang pamilyar sa iyo – kailangan nitong i-print ang nararapat na impormasyon sa `stdout`
At, kung nagpapatakbo ka sa Windows, nangangahulugan itong kailangan mo ng isang espesyal na pag-iingat upang hindi magpakilala ng carriage na mga return sa hulihan ng iyong mga linya – ang `git fast-import` ay sobrang partikular tungkol sa kagustuhan ng mga line feed (LF) hindi ang carriage return line feeds (CRLF) na ginagamit ng Windows.

Upang magsimula, magbabago ka sa target na direktoryo at tutukuyin ang bawat subdirectory, kung saan ang bawat isa ay isang snapshot na gusto mong i-import bilang isang commit.
Magbabago ka sa bawat subdirectory at ipi-print ang mga utos na nararapat upang i-export ito.
Ang iyong paunang pangunahing loop ay magmumukhang katulad nito:

[source,ruby]
----
last_mark = nil

# loop through the directories
Dir.chdir(ARGV[0]) do
  Dir.glob("*").each do |dir|
    next if File.file?(dir)

    # move into the target directory
    Dir.chdir(dir) do
      last_mark = print_export(dir, last_mark)
    end
  end
end
----

Patatakbuhin mo ang `print_export` sa loob ng bawat direktoryo, na kukunin ang manipesto at marka ng nakaraang snapshot at ibabalik ang manipesto at marka nito; sa paraang iyon, maaari mong i-ugnay nang maayos.
Ang ``Mark'' ay ang `fast-import` na termino para sa isang identifier na ibinibigay mo sa isang commit; habang ikaw ay gumagawa ng mga commit, binibigyan mo ang bawat isa ng isang marka na maaari mong gamitin upang i-ugnay sa ito mula sa ibang mga commit.
Kaya, ang unang bagay na gagawin sa iyong `print_export` na paraan ay ang paglikha ng isang marka mula sa pangalan ng direktoryo:

[source,ruby]
----
mark = convert_dir_to_mark(dir)
----

Gagawin mo ito sa pamamagitan ng paggawa ng isang array ng mga direktoryo at paggamit ng index na halaga bilang marka, dahil ang isang marka ay dapat isang integer.
Ang iyong paraan ay magmumukhang katulad nito:

[source,ruby]
----
$marks = []
def convert_dir_to_mark(dir)
  if !$marks.include?(dir)
    $marks << dir
  end
  ($marks.index(dir) + 1).to_s
end
----

Ngayon na mayroon ka nang isang integer na representasyon ng iyong commit, kailangan mo ng isang petsa para sa commit na metadata.
Dahil ang petsa ay ipinahayag sa pangalan ng direktoryo, kailangan mong i-parse ito.
Ang susunod na linya sa iyong `print_export` na file ay:

[source,ruby]
----
date = convert_dir_to_date(dir)
----

kung saan ang `convert_dir_to_date` ay nakatakda bilang:

[source,ruby]
----
def convert_dir_to_date(dir)
  if dir == 'current'
    return Time.now().to_i
  else
    dir = dir.gsub('back_', '')
    (year, month, day) = dir.split('_')
    return Time.local(year, month, day).to_i
  end
end
----

Iyon ay nagbabalik ng isang integer na halaga para sa petsa ng bawat direktoryo.
Ang huling piraso ng meta-information na kailangan mo sa bawat commit ay ang committer na datos, na iyong na-hardcode sa global na variable:

[source,ruby]
----
$author = 'John Doe <john@example.com>'
----

Ngayon ikaw ay handa nang simulan ang pag-printa ng commit na datos para sa iyong importer.
Ang paunang impormasyon ay nagtatalakay na nagtatakda ka ng isang commit na object at kung anong branch ito naroroon, sinusundan ng marka na iyong nalikha, ang committer na impormasyon at commit na mensahe, at ang nakaraang commit, kung anuman.
Ang code ay magmumukhang katulad nito:

[source,ruby]
----
# print the import information
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts "committer #{$author} #{date} -0700"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark
----

Na-hardcode mo ang time zone (-0700) dahil ang paggawa nito ay sobrang madali.
Kung ikaw ay nag-iimport mula sa ibang sistema, kailangan mong tukuyin ang time zone bilang isang offset.
Ang commit na mensahe ay dapat mapahayag sa isang espeyal na format:

[source]
----
data (size)\n(contents)
----

Ang format ay binubuo ng salita na datos, ang laki ng datos na babasahin, isang newline, at sa wakas ang data.
Dahil kailangan mong gumamit ng parehong format upang tukuyin ang mga nilalaman ng file mamaya, gagawa ka ng isang katulong na paraan, `export_data`:

[source,ruby]
----
def export_data(string)
  print "data #{string.size}\n#{string}"
end
----

Ang natitira lamang na tutukuyin ay ang mga nilalaman ng file para sa bawat snapshot.
Ito ay madali, dahil mayroon ka sa bawat isa sa isang direktoryo – maaari mong i-print ang `deleteall` na utos na sinusundan ng mga nilalaman sa bawat file sa direktoryo.
Ang Git ngayon ay naaangkop na iri-record ang bawat snapshot:

[source,ruby]
----
puts 'deleteall'
Dir.glob("**/*").each do |file|
  next if !File.file?(file)
  inline_data(file)
end
----

Tandaan: Dahil maraming mga sistema ay nag-iisip sa kanilang mga revision bilang mga pagbabago mula sa isang commit tungo sa iba, ang fast-import ay maaari ring kumuha ng mga utos sa bawat commit upang tukuyin kung anong mga file ang naidagdag, natanggal, o nabago at ano ang mga bagong nilalaman.
Maaari mong kalkulahin ang mga pagkakaiba sa pagitan ng mga snapshot at magbigay lamang nitong datos, ngunit ang paggawa nito ay mas kumplikado – marahil ikaw din ay magbibigay ng Git ng lahat ng datos at hahayaan itong alamin ito.
Kung ito ay mas mainam para sa iyong data, suriin ang `fast-import` na man na pahina para sa mga detalye tungkol kung paano magbigay ng iyong datos sa ganitong paraan.

Ang format para sa pag-lista ng bagong mga nilalaman ng file o pagtutukoy ng isang nabagong file gamit ang bagong mga nilalaman ay tulad ng sumusunod:

[source]
----
M 644 inline path/to/file
data (size)
(file contents)
----

Dito, ang 644 na mode (kung mayroon kang maipapatupad na mga file, kailangan mong tuklasin at sa halip ay tukuyin ang 755), at sinasabi ng inline na iyong i-lilista ang mga nilalaman nang madalian pagkatapos ng linyang ito.
Ang iyong `inline_data` na paraan ay magmumukhang katulad nito:

[source,ruby]
----
def inline_data(file, code = 'M', mode = '644')
  content = File.read(file)
  puts "#{code} #{mode} inline #{file}"
  export_data(content)
end
----

Gamitin mo ulit ang `export_data` na paraan na iyong naitakda kamakailan lang, dahil ito ay pareho sa paraang itinukoy mo ang iyong datos ng commit na mensahe.

Ang huling bagay na kailangan mong gawin ay pagpapabalik ng kasalukuyang marka upang ito ay maaaring mapasa sa susunod na pag-uulit:

[source,ruby]
----
return mark
----

[TANDAAN]
====
Kung ikaw ay nagpapatakbo sa Windows kailangan mong siguraduhing magdagdag ka ng isang karagdagang hakbang.
Tulad ng nabanggit noon, ang Windows ay gumagamit ng CRLF para sa new line na mga karakter habang inaasahan ng `git fast-import` ang LF lamang.
Upang malaktawan ang problemang ito at masayang gumawa ng `git fast-import`, kailangan mong sabihan ang ruby na gumamit ng LF sa halip na CRLF:

[source,ruby]
----
$stdout.binmode
----
====

Iyon lang iyon.
Narito ang iskrip sa pangkabuuan nito:


[source,ruby]
----
#!/usr/bin/env ruby

$stdout.binmode
$author = "John Doe <john@example.com>"

$marks = []
def convert_dir_to_mark(dir)
    if !$marks.include?(dir)
        $marks << dir
    end
    ($marks.index(dir)+1).to_s
end

def convert_dir_to_date(dir)
    if dir == 'current'
        return Time.now().to_i
    else
        dir = dir.gsub('back_', '')
        (year, month, day) = dir.split('_')
        return Time.local(year, month, day).to_i
    end
end

def export_data(string)
    print "data #{string.size}\n#{string}"
end

def inline_data(file, code='M', mode='644')
    content = File.read(file)
    puts "#{code} #{mode} inline #{file}"
    export_data(content)
end

def print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts 'commit refs/heads/master'
    puts "mark :#{mark}"
    puts "committer #{$author} #{date} -0700"
    export_data("imported from #{dir}")
    puts "from :#{last_mark}" if last_mark

    puts 'deleteall'
    Dir.glob("**/*").each do |file|
        next if !File.file?(file)
        inline_data(file)
    end
    mark
end

# Maglo-loop sa mga direktoryo
last_mark = nil
Dir.chdir(ARGV[0]) do
    Dir.glob("*").each do |dir|
        next if File.file?(dir)

        # move into the target directory
        Dir.chdir(dir) do
            last_mark = print_export(dir, last_mark)
        end
    end
end
----

Kung papatakbuhin mo ang iskrip na ito, makakatanggap ka ng nilalaman na magmumukhang katulad nito:

[source,console]
----
$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)
----

Upang mapatakbo ang importer, i-pipe ang output na ito gamit ang `git fast-import` habang nasa Git na direktoryo na kung saan gusto mong mag-import.
Maaari kang bumuo ng bagong direktoryo at magpatakbo ng `git init` sa ito para sa isang panimulang punto, at patakbuhin ang iyong iskrip:

[source,console]
----
$ git init
Initialized empty Git repository in /opt/import_to/.git/
$ ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------
----

Batay sa iyong nakita, kapag ito ay matagumpay na matatapos, bibigyan ka nito ng bungkos ng mga istatistika tungkol sa kung ano ang natapos nito.
Sa kasong ito, nag-import ka ng kabuuang 13 na mga object para sa 4 na mga commit sa 1 branch.
Ngayon, maaari mong patakbuhin ang `git log` upang makita ang iyong bagong kasaysayan:

[source,console]
----
$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john@example.com>
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john@example.com>
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03
----

Ayan – isang maganda, malinis na Git na repositoryo.
Importanteng tandaan na walang na-check out – wala kang anumang file sa iyong tinatrabahong direktoryo sa simula pa lang.
Upang makuha ang mga ito, dapat mong i-reset ang iyong branch sa kung saan ang `master` ngayon:

[source,console]
----
$ ls
$ git reset --hard master
HEAD is now at 3caa046 imported from current
$ ls
README.md main.rb
----

Maaari kang gumawa ng mas higit pa gamit ang `fast-import` na kasangkapan – humawak ng iba't ibang mga mode, binary na datos, maramihang mga branch at pag-merge, mga tag, mga tagapagpabatid ng pag-unlad, at marami pa.
Marami pang mga halimbawa ng mas kumplikadong mga pangyayari ang maaaring magamit ng `contrib/fast-import` na direktoryo ng Git na source code.
